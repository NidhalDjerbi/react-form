{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nom","email","subject","message","modal","callApi","asyncToGenerator","regenerator_default","a","mark","_callee","response","body","wrap","_context","prev","next","fetch","sent","json","status","Error","abrupt","stop","toggle","setState","handleSubmit","_ref2","_callee2","e","_context2","preventDefault","console","log","method","headers","Content-Type","JSON","stringify","name","text","responseToPost","_x","apply","arguments","bind","assertThisInitialized","_this2","then","res","express","catch","err","_this3","react_default","createElement","mdbreact","onSubmit","className","label","icon","group","type","validate","required","error","success","ref","onChange","target","value","rows","outline","color","isOpen","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a337ffbc.chunk.js","sourcesContent":["import React,{Component} from \"react\";\nimport { MDBContainer, MDBInput , MDBIcon , MDBBtn,Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'mdbreact';\nimport \"./index.css\";\n\nclass App extends Component {\n\n  state = {\n    nom: '',\n    email : '',\n    subject :'',\n    message :'',\n    modal: false\n  }\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  \n  \ncomponentDidMount() {\n  \n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('api/contact');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n  };\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    console.log(this.state);\n    const response = await fetch('api/contact', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({name: this.state.nom,\n        email: this.state.email,\n        subject: this.state.subject,\n        message: this.state.message\n      }),\n    });\n    const body = await response.text();\n    this.setState({ responseToPost: body });\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n   \n  \n\n  render() {\n    \n    return (\n   \n\n     <MDBContainer>\n          <form onSubmit={this.handleSubmit} >\n            <p className=\"h5 text-center mb-4\">N'hésitez pas à nous contacter</p>\n            <div className=\"grey-text\">\n              <MDBInput\n                label=\"Nom\"\n                icon=\"user\"\n                group\n                type=\"text\"\n                validate\n                required\n                error=\"wrong\"\n                success=\"right\"\n                ref=\"nom\"\n                onChange={e => this.setState({ nom: e.target.value })}\n              />\n              <MDBInput\n                label=\"Email\"\n                icon=\"envelope\"\n                group\n                type=\"email\"\n                validate\n                required\n                error=\"wrong\"\n                success=\"right\"\n                ref=\"email\"\n\n                onChange={e => this.setState({ email: e.target.value })}\n              />\n              <MDBInput\n                label=\"Sujet\"\n                icon=\"tag\"\n                group\n                type=\"text\"\n                validate\n                required\n                error=\"wrong\"\n                success=\"right\"\n                ref=\"subject\"\n                onChange={e => this.setState({ subject: e.target.value })}\n              />\n              <MDBInput\n                type=\"textarea\"\n                rows=\"2\"\n                label=\"Message\"\n                icon=\"pencil\"\n                required\n                ref=\"message\"\n                onChange={e => this.setState({ message: e.target.value })}\n              />\n            </div>\n            <div className=\"text-center\">\n              <MDBBtn type =\"submit\" outline color=\"primary\" >\n                Contact <MDBIcon icon=\"paper-plane-o\" className=\"ml-1\" />\n              </MDBBtn>\n            </div>\n            \n          </form>\n          <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader className=\"bg\" toggle={this.toggle}></ModalHeader>\n          <ModalBody>\n            <p>Message reçu!</p> \n            <p> Nous revenons vers vous dans les plus brefs délais </p>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.toggle}>Close</Button>{' '}\n          </ModalFooter>\n        </Modal>\n    </MDBContainer>\n   \n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}